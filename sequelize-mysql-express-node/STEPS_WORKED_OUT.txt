## Installing Sequelize
npm init
npm install --save sequelize

## Installing any of the DB
npm install --save mysql

## Installing mysql2
npm install --save mysql2

npm install sequelize-cli -g

## Initializing Sequelize
sequelize init

## Creating a connection with mysql
const Sequelize = require('sequelize')
const sequelize = new Sequelize('sequelizedb', 'root', 'Varsini123!', {
  host: 'localhost',
  dialect: 'mysql',

  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  },

  // SQLite only
  //storage: 'path/to/database.sqlite'
  //operatorsAliases: false
});

## Defining a model (fields and attributes)
var User = sequelize.define('user', {
  firstName: {
    type: Sequelize.STRING,
    field: 'first_name' // Will result in an attribute that is firstName when user facing but first_name in the database
  },
  lastName: {
    type: Sequelize.STRING
  }
}, {
  freezeTableName: true // Model tableName will be the same as the model name
});

// Syncing the model with table
User.sync({force: true}).then(function () {
  // Table created
  return User.create({
    firstName: 'John',
    lastName: 'Hn'
  });
});

// Creating another model users
var users = sequelize.define("users", {
  id: {
    type: Sequelize.INTEGER(11),
    allowNull: false,
    autoIncrement: true,
    primaryKey: true
  },
  username: {
    type: Sequelize.STRING(35),
    allowNull: false,
    unique: true
  },
  passwd: {
    type: Sequelize.STRING(20),
    allowNull: false
  },
  favoriteColor: {
  	type: Sequelize.STRING(20),
  	allowNull: true,
  }
});
// creating users which will create a entry in table
console.log(users)
users.sync({force: true}).then(function () {
  // Table created
  return users.create({
  	id : '123',
    username: 'John',
    passwd: 'Hn'
  });
});
// sequelize.model.users.findOne().then(function (user) {
//     console.log(users.get('username'));
// });

# Inserting, Updating and selecting the data in model
users.sync({force: true}).then(async function start() {
  // Table created
	const jane = await users.create({ username: "Jane", passwd: "Hjd", favoriteColor: "green" });
	console.log(jane.username); // "Jane"
	console.log(jane.favoriteColor); // "green"
	jane.username = "Jane II";
	jane.favoriteColor = "blue";
	await jane.save({ fields: ['username','favoriteColor'] });
	console.log(jane.username); // "Jane II"
	console.log(jane.favoriteColor); // "blue"
	// The above printed blue because the local object has it set to blue, but
	// in the database it is still "green":
	await jane.reload();
	console.log(jane.username); // "Jane II"
	console.log(jane.favoriteColor); // "green"
	var userss = await users.findAll({attributes: ['username', 'favoriteColor']});
	console.log(userss.every(user => users instanceof users)); // true
	console.log("All users:", JSON.stringify(userss, null, 2));
	var userss = await users.findAll({attributes: ['username', [sequelize.fn('COUNT', sequelize.col('favoriteColor')), 'n_favoriteColor'],'favoriteColor']});
	console.log(userss.every(user => users instanceof users)); // true
	console.log("All users:", JSON.stringify(userss, null, 2));
	var userss = await users.findAll({group: ['username']});
	console.log(userss.every(user => users instanceof users)); // true
	console.log("All users:", JSON.stringify(userss, null, 2));
	await users.update({ favoriteColor: "Black" }, {
    	where: {
    		favoriteColor: null
  		}
  	});
});

## Can Define a model using migration 
sequelize migration:generate --name create_tweets_table

## Inside the created file in migrations, can include commands for both up and down functions
module.exports = {
  up: (queryInterface, Sequelize) => {
    //You must return a promise 
    return queryInterface.createTable("tweets", {
      id: {
        type: Sequelize.INTEGER(11),
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
      },
      content: Sequelize.STRING(300),
      userId: Sequelize.INTEGER(11),
      //Those are added by default on insertion (make sure to create the their columns)
      createdAt: Sequelize.DATE,
      updatedAt: Sequelize.DATE
    });
  },

  down: (queryInterface, Sequelize) => {
    //Return a promise that drops a table in case of (migration:undo)
    return queryInterface.dropTable("tweets");
  }
};

## Inserting and Fetching data will be similar like did before
//Export a default function (we use Async/Await)
module.exports = async () => {
  //Require models
  const Tweet = require("./models/Tweet");
  const User = require("./models/User"); // Like Tweets we can create a similar table user
  //Create Relations 
  User.hasMany(Tweet, { as: "Tweets", foreignKey: "userId" });
  Tweet.belongsTo(User, { as: "User", foreignKey: "userId" });
};
//Generic Error Handler 
const errHandler = err => {
  //Catch and log any error.
  console.error("Error: ", err);
};
//create returns a promise which gets resolved to the user instance 
//We also use await, you can use standard then callback.
const user = await User.create({
  username: "alexdmc",
  passwd: "1234567890"
}).catch(errHandler); ///< Catch any errors that gets thrown
//You must provide the userId to get each tweet linked to a single user.
const tweet = await Tweet.create({
  content: "This is actually the tweet content Tweeted from Iphone",
  userId: user.id
}).catch(errHandler);
//Find All Users with Thier Tweets
const users = await User.findAll({
  where: { username: "alexdmc" },
  include: [{ model: Tweet, as: "Tweets" }] ///< include used to eager-load associated model 
}).catch(errHandler);
//log users & tweets
console.log("AlexDMC Tweets: ", JSON.stringify(users));